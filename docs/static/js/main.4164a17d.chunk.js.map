{"version":3,"sources":["serviceWorker.js","Input/Input.jsx","Item/Item.jsx","ToDoList/ToDoList.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Input","onSubmit","value","onChange","className","type","placeholder","Item","checked","id","crossItem","date","ToDoList","props","state","item","list","e","preventDefault","this","newItem","Math","random","slice","moment","format","push","setState","key","findIndex","updatedItem","newToDoList","updateInput","target","addItem","map","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4164a17d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport \"./Input.css\";\n\nexport const Input = ({ onSubmit, value, onChange }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        className=\"InputBar\"\n        type=\"text\"\n        placeholder=\"Enter task...\"\n        value={value}\n        onChange={onChange}\n      />\n      <button className=\"SubmitBttn\">Submit</button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport \"./Item.css\";\n\nexport const Item = ({ checked, id, crossItem, value, date }) => {\n  return (\n    <li className=\"ListItem\" id={id}>\n      <div className=\"TitleCont\">\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={crossItem}\n          className=\"Checkbox\"\n        />\n        <p className={checked ? \"Strike ToDoText\" : \"ToDoText\"}>{value}</p>\n      </div>\n      <span className=\"DateText\">{date}</span>\n    </li>\n  );\n};\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Input } from \"../Input/Input\";\nimport { Item } from \"../Item/Item\";\nimport \"./ToDoList.css\";\n\nclass ToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: \"\",\n      list: [\n        {\n          id: 5,\n          value: \"Learn React\",\n          date: \"7:30 PM\",\n          checked: false,\n        },\n        {\n          id: 2,\n          value: \"Move on to API\",\n          date: \"8:30 PM\",\n          checked: false,\n        },\n        {\n          id: 53,\n          value: \"Clean the house\",\n          date: \"9:30 PM\",\n          checked: false,\n        },\n        {\n          id: 4,\n          value: \"Watch that movie\",\n          date: \"10:30 PM\",\n          checked: false,\n        },\n      ],\n    };\n  }\n\n  addItem(e) {\n    e.preventDefault();\n    if (this.state.item !== \"\") {\n      const newItem = {\n        id: 1 + Math.random(),\n        value: this.state.item.slice(),\n        date: moment().format(\"LT\"),\n        checked: false,\n      };\n      let list = [...this.state.list];\n      list.push(newItem);\n      this.setState({ list, newItem, item: \"\" });\n    }\n  }\n\n  updateInput(key, value) {\n    this.setState({ [key]: value });\n  }\n\n  crossItem(id) {\n    let list = this.state.list;\n    const item = list.findIndex((item) => item.id === id);\n    let updatedItem = list[item];\n    updatedItem.checked = !updatedItem.checked;\n    const newToDoList = [...list];\n    newToDoList[item] = updatedItem;\n    this.setState({ list: newToDoList });\n  }\n\n  render() {\n    return (\n      <div className=\"ToDoContainer\">\n        <div className=\"ToDoList\">\n          <div className=\"TodoHeader\">\n            <h2>To Do:</h2>\n            <span className=\"DateHeading\">{moment().format(\"lll\")}</span>\n            <Input\n              onChange={(e) => this.updateInput(\"item\", e.target.value)}\n              onSubmit={(e) => this.addItem(e)}\n              value={this.state.item}\n            />\n          </div>\n          <ul className=\"ListCont\">\n            {this.state.list.map((item) => (\n              <Item\n                key={item.id}\n                checked={item.checked}\n                id={item.id}\n                crossItem={() => this.crossItem(item.id)}\n                value={item.value}\n                date={item.date}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ToDoList;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ToDoList from \"./ToDoList/ToDoList\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToDoList />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}